version: '3'

volumes:
  postgres_volume:
  prometheus_volume:
  grafana_volume:
  redis_volume:

services:
  auth:
    image: auth:${APP_IMAGE_TAG}
    container_name: auth
    env_file:
      - ${ENV}.env
    ports:
      - "${GRPC_PORT}:${GRPC_PORT}"
      - "${HTTP_PORT}:${HTTP_PORT}"
      - "${SWAGGER_PORT}:${SWAGGER_PORT}"
      - "${PROMETHEUS_HTTP_PORT}:${PROMETHEUS_HTTP_PORT}"
    networks:
      - service-network
    depends_on:
      db-auth:
        condition: service_healthy
      migrator-auth:
        condition: service_completed_successfully
  db-auth:
    image: postgres:${POSTGRES_IMAGE_TAG}
    container_name: db-auth
    env_file:
      - ${ENV}.env
    ports:
      - "${POSTGRES_PORT_LOCAL}:5432"
    networks:
      - service-network
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 1s
      timeout: 5s
      retries: 5
  migrator-auth:
    image: migrator-auth:${MIGRATOR_IMAGE_TAG}
    container_name: migrator-auth
    restart: on-failure
    environment:
      DB_HOST: db-auth
    networks:
      - service-network
    depends_on:
      db-auth:
        condition: service_healthy
  prometheus:
    image: prom/prometheus:${PROMETHEUS_IMAGE_TAG}
    container_name: prometheus
    env_file:
      - ${ENV}.env
    ports:
      - "9090:9090"
    networks:
      - service-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - ./metrics/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./metrics/alerts.yml:/etc/prometheus/alerts.yml
      - prometheus_volume:/prometheus
  grafana:
    image: grafana/grafana-oss:${GRAFANA_IMAGE_TAG}
    container_name: grafana
    ports:
      - "3000:3000"
    networks:
      - service-network
    volumes:
      - grafana_volume:/var/lib/grafana
  jaeger:
    image: jaegertracing/all-in-one:${JAEGER_IMAGE_TAG}
    container_name: jaeger
    ports:
      - "16686:16686" # web
      - "4317:4317"   # OTLP over gRPC
    networks:
      - service-network
  redis:
    image: redis:7.2.5-alpine3.20
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_volume:/data
    networks:
      - service-network

networks:
  service-network:
    name: service-net
    external: true
