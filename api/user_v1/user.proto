syntax = "proto3";

package user_v1;

import "google/protobuf/timestamp.proto";
import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "validate/validate.proto";
import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/polshe-v/microservices_auth/pkg/user_v1;user_v1";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
	info: {
		title: "User API"
		version: "1.0.0"
		contact: {
			name: "Polina Sheviakova"
		};
	};

	host: "localhost:8090"
	schemes: HTTP,
	schemes: HTTPS,
	consumes: "application/json",
	produces: "application/json",
};

service UserV1 {
	// Create is used for creating new user.
	rpc Create(CreateRequest) returns (CreateResponse){
		option (google.api.http) = {
			post: "/user/v1/create"
			body: "*"
    	};
	}

	// Get is used to obtain user info.
	rpc Get(GetRequest) returns (GetResponse){
		option (google.api.http) = {
			get: "/user/v1"
		};
	}

	// Update is used for updating user info.
	rpc Update(UpdateRequest) returns (google.protobuf.Empty){
		option (google.api.http) = {
			patch: "/user/v1"
			body: "*"
		};
	}

	// Delete is used for deleting user.
	rpc Delete(DeleteRequest) returns (google.protobuf.Empty){
		option (google.api.http) = {
			delete: "/user/v1"
		};
	}
}

enum Role {
	UNKNOWN = 0;
	USER = 1;
	ADMIN = 2;
}

message User {
	// ID of the user.
	int64 id = 1;
	// Name of the user.
	string name = 2;
	// Email of the user.
	string email = 3;
	// Role of the user.
	Role role = 4;
	// Timestamp when user was created.
	google.protobuf.Timestamp created_at = 5;
	// Timestamp when user info was updated last time.
	google.protobuf.Timestamp updated_at = 6;
}

message UserCreate {
	// Name of the user to create.
	string name = 1 [(validate.rules).string = {min_len: 1, max_len: 50}];
	// Email of the user to create.
	string email = 2 [(validate.rules).string.email = true];
	// Password of the user to create.
	string password = 3 [(validate.rules).string = {min_len: 16, max_len: 256}];
	// Password confirmation of the user to create.
	string password_confirm = 4 [(validate.rules).string = {min_len: 16, max_len: 256}];
	// Role of the user to create.
	Role role = 5 [(validate.rules).enum.defined_only = true];
}

message UserUpdate {
	// ID of the user to update.
	int64 id = 1 [(validate.rules).int64.gte = 1];
	// [optional] Name of the user to update.
	google.protobuf.StringValue name = 2 [(validate.rules).string = {ignore_empty: true, min_len: 1, max_len: 50}];
	// [optional] Email of the user to update.
	google.protobuf.StringValue email = 3 [(validate.rules).string = {email: true, ignore_empty: true}];
	// Role of the user to update.
	Role role = 4 [(validate.rules).enum.defined_only = true];
}

message CreateRequest {
	UserCreate user = 1;
}

message CreateResponse {
	// ID of the created user.
	int64 id = 1;
}

message GetRequest {
	// ID of the user to read info about.
	int64 id = 1 [(validate.rules).int64.gte = 1];
}

message GetResponse {
	User user = 1;
}

message UpdateRequest {
	UserUpdate user = 1;
}

message DeleteRequest {
	// ID of the user to delete.
	int64 id = 1 [(validate.rules).int64.gte = 1];
}
