// Code generated by http://github.com/gojuno/minimock (v3.3.12). DO NOT EDIT.

package mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
)

// KeyRepositoryMock implements repository.KeyRepository
type KeyRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGetKey          func(ctx context.Context, keyName string) (s1 string, err error)
	inspectFuncGetKey   func(ctx context.Context, keyName string)
	afterGetKeyCounter  uint64
	beforeGetKeyCounter uint64
	GetKeyMock          mKeyRepositoryMockGetKey
}

// NewKeyRepositoryMock returns a mock for repository.KeyRepository
func NewKeyRepositoryMock(t minimock.Tester) *KeyRepositoryMock {
	m := &KeyRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetKeyMock = mKeyRepositoryMockGetKey{mock: m}
	m.GetKeyMock.callArgs = []*KeyRepositoryMockGetKeyParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mKeyRepositoryMockGetKey struct {
	optional           bool
	mock               *KeyRepositoryMock
	defaultExpectation *KeyRepositoryMockGetKeyExpectation
	expectations       []*KeyRepositoryMockGetKeyExpectation

	callArgs []*KeyRepositoryMockGetKeyParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// KeyRepositoryMockGetKeyExpectation specifies expectation struct of the KeyRepository.GetKey
type KeyRepositoryMockGetKeyExpectation struct {
	mock      *KeyRepositoryMock
	params    *KeyRepositoryMockGetKeyParams
	paramPtrs *KeyRepositoryMockGetKeyParamPtrs
	results   *KeyRepositoryMockGetKeyResults
	Counter   uint64
}

// KeyRepositoryMockGetKeyParams contains parameters of the KeyRepository.GetKey
type KeyRepositoryMockGetKeyParams struct {
	ctx     context.Context
	keyName string
}

// KeyRepositoryMockGetKeyParamPtrs contains pointers to parameters of the KeyRepository.GetKey
type KeyRepositoryMockGetKeyParamPtrs struct {
	ctx     *context.Context
	keyName *string
}

// KeyRepositoryMockGetKeyResults contains results of the KeyRepository.GetKey
type KeyRepositoryMockGetKeyResults struct {
	s1  string
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetKey *mKeyRepositoryMockGetKey) Optional() *mKeyRepositoryMockGetKey {
	mmGetKey.optional = true
	return mmGetKey
}

// Expect sets up expected params for KeyRepository.GetKey
func (mmGetKey *mKeyRepositoryMockGetKey) Expect(ctx context.Context, keyName string) *mKeyRepositoryMockGetKey {
	if mmGetKey.mock.funcGetKey != nil {
		mmGetKey.mock.t.Fatalf("KeyRepositoryMock.GetKey mock is already set by Set")
	}

	if mmGetKey.defaultExpectation == nil {
		mmGetKey.defaultExpectation = &KeyRepositoryMockGetKeyExpectation{}
	}

	if mmGetKey.defaultExpectation.paramPtrs != nil {
		mmGetKey.mock.t.Fatalf("KeyRepositoryMock.GetKey mock is already set by ExpectParams functions")
	}

	mmGetKey.defaultExpectation.params = &KeyRepositoryMockGetKeyParams{ctx, keyName}
	for _, e := range mmGetKey.expectations {
		if minimock.Equal(e.params, mmGetKey.defaultExpectation.params) {
			mmGetKey.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetKey.defaultExpectation.params)
		}
	}

	return mmGetKey
}

// ExpectCtxParam1 sets up expected param ctx for KeyRepository.GetKey
func (mmGetKey *mKeyRepositoryMockGetKey) ExpectCtxParam1(ctx context.Context) *mKeyRepositoryMockGetKey {
	if mmGetKey.mock.funcGetKey != nil {
		mmGetKey.mock.t.Fatalf("KeyRepositoryMock.GetKey mock is already set by Set")
	}

	if mmGetKey.defaultExpectation == nil {
		mmGetKey.defaultExpectation = &KeyRepositoryMockGetKeyExpectation{}
	}

	if mmGetKey.defaultExpectation.params != nil {
		mmGetKey.mock.t.Fatalf("KeyRepositoryMock.GetKey mock is already set by Expect")
	}

	if mmGetKey.defaultExpectation.paramPtrs == nil {
		mmGetKey.defaultExpectation.paramPtrs = &KeyRepositoryMockGetKeyParamPtrs{}
	}
	mmGetKey.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetKey
}

// ExpectKeyNameParam2 sets up expected param keyName for KeyRepository.GetKey
func (mmGetKey *mKeyRepositoryMockGetKey) ExpectKeyNameParam2(keyName string) *mKeyRepositoryMockGetKey {
	if mmGetKey.mock.funcGetKey != nil {
		mmGetKey.mock.t.Fatalf("KeyRepositoryMock.GetKey mock is already set by Set")
	}

	if mmGetKey.defaultExpectation == nil {
		mmGetKey.defaultExpectation = &KeyRepositoryMockGetKeyExpectation{}
	}

	if mmGetKey.defaultExpectation.params != nil {
		mmGetKey.mock.t.Fatalf("KeyRepositoryMock.GetKey mock is already set by Expect")
	}

	if mmGetKey.defaultExpectation.paramPtrs == nil {
		mmGetKey.defaultExpectation.paramPtrs = &KeyRepositoryMockGetKeyParamPtrs{}
	}
	mmGetKey.defaultExpectation.paramPtrs.keyName = &keyName

	return mmGetKey
}

// Inspect accepts an inspector function that has same arguments as the KeyRepository.GetKey
func (mmGetKey *mKeyRepositoryMockGetKey) Inspect(f func(ctx context.Context, keyName string)) *mKeyRepositoryMockGetKey {
	if mmGetKey.mock.inspectFuncGetKey != nil {
		mmGetKey.mock.t.Fatalf("Inspect function is already set for KeyRepositoryMock.GetKey")
	}

	mmGetKey.mock.inspectFuncGetKey = f

	return mmGetKey
}

// Return sets up results that will be returned by KeyRepository.GetKey
func (mmGetKey *mKeyRepositoryMockGetKey) Return(s1 string, err error) *KeyRepositoryMock {
	if mmGetKey.mock.funcGetKey != nil {
		mmGetKey.mock.t.Fatalf("KeyRepositoryMock.GetKey mock is already set by Set")
	}

	if mmGetKey.defaultExpectation == nil {
		mmGetKey.defaultExpectation = &KeyRepositoryMockGetKeyExpectation{mock: mmGetKey.mock}
	}
	mmGetKey.defaultExpectation.results = &KeyRepositoryMockGetKeyResults{s1, err}
	return mmGetKey.mock
}

// Set uses given function f to mock the KeyRepository.GetKey method
func (mmGetKey *mKeyRepositoryMockGetKey) Set(f func(ctx context.Context, keyName string) (s1 string, err error)) *KeyRepositoryMock {
	if mmGetKey.defaultExpectation != nil {
		mmGetKey.mock.t.Fatalf("Default expectation is already set for the KeyRepository.GetKey method")
	}

	if len(mmGetKey.expectations) > 0 {
		mmGetKey.mock.t.Fatalf("Some expectations are already set for the KeyRepository.GetKey method")
	}

	mmGetKey.mock.funcGetKey = f
	return mmGetKey.mock
}

// When sets expectation for the KeyRepository.GetKey which will trigger the result defined by the following
// Then helper
func (mmGetKey *mKeyRepositoryMockGetKey) When(ctx context.Context, keyName string) *KeyRepositoryMockGetKeyExpectation {
	if mmGetKey.mock.funcGetKey != nil {
		mmGetKey.mock.t.Fatalf("KeyRepositoryMock.GetKey mock is already set by Set")
	}

	expectation := &KeyRepositoryMockGetKeyExpectation{
		mock:   mmGetKey.mock,
		params: &KeyRepositoryMockGetKeyParams{ctx, keyName},
	}
	mmGetKey.expectations = append(mmGetKey.expectations, expectation)
	return expectation
}

// Then sets up KeyRepository.GetKey return parameters for the expectation previously defined by the When method
func (e *KeyRepositoryMockGetKeyExpectation) Then(s1 string, err error) *KeyRepositoryMock {
	e.results = &KeyRepositoryMockGetKeyResults{s1, err}
	return e.mock
}

// Times sets number of times KeyRepository.GetKey should be invoked
func (mmGetKey *mKeyRepositoryMockGetKey) Times(n uint64) *mKeyRepositoryMockGetKey {
	if n == 0 {
		mmGetKey.mock.t.Fatalf("Times of KeyRepositoryMock.GetKey mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetKey.expectedInvocations, n)
	return mmGetKey
}

func (mmGetKey *mKeyRepositoryMockGetKey) invocationsDone() bool {
	if len(mmGetKey.expectations) == 0 && mmGetKey.defaultExpectation == nil && mmGetKey.mock.funcGetKey == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetKey.mock.afterGetKeyCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetKey.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetKey implements repository.KeyRepository
func (mmGetKey *KeyRepositoryMock) GetKey(ctx context.Context, keyName string) (s1 string, err error) {
	mm_atomic.AddUint64(&mmGetKey.beforeGetKeyCounter, 1)
	defer mm_atomic.AddUint64(&mmGetKey.afterGetKeyCounter, 1)

	if mmGetKey.inspectFuncGetKey != nil {
		mmGetKey.inspectFuncGetKey(ctx, keyName)
	}

	mm_params := KeyRepositoryMockGetKeyParams{ctx, keyName}

	// Record call args
	mmGetKey.GetKeyMock.mutex.Lock()
	mmGetKey.GetKeyMock.callArgs = append(mmGetKey.GetKeyMock.callArgs, &mm_params)
	mmGetKey.GetKeyMock.mutex.Unlock()

	for _, e := range mmGetKey.GetKeyMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGetKey.GetKeyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetKey.GetKeyMock.defaultExpectation.Counter, 1)
		mm_want := mmGetKey.GetKeyMock.defaultExpectation.params
		mm_want_ptrs := mmGetKey.GetKeyMock.defaultExpectation.paramPtrs

		mm_got := KeyRepositoryMockGetKeyParams{ctx, keyName}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetKey.t.Errorf("KeyRepositoryMock.GetKey got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.keyName != nil && !minimock.Equal(*mm_want_ptrs.keyName, mm_got.keyName) {
				mmGetKey.t.Errorf("KeyRepositoryMock.GetKey got unexpected parameter keyName, want: %#v, got: %#v%s\n", *mm_want_ptrs.keyName, mm_got.keyName, minimock.Diff(*mm_want_ptrs.keyName, mm_got.keyName))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetKey.t.Errorf("KeyRepositoryMock.GetKey got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetKey.GetKeyMock.defaultExpectation.results
		if mm_results == nil {
			mmGetKey.t.Fatal("No results are set for the KeyRepositoryMock.GetKey")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGetKey.funcGetKey != nil {
		return mmGetKey.funcGetKey(ctx, keyName)
	}
	mmGetKey.t.Fatalf("Unexpected call to KeyRepositoryMock.GetKey. %v %v", ctx, keyName)
	return
}

// GetKeyAfterCounter returns a count of finished KeyRepositoryMock.GetKey invocations
func (mmGetKey *KeyRepositoryMock) GetKeyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetKey.afterGetKeyCounter)
}

// GetKeyBeforeCounter returns a count of KeyRepositoryMock.GetKey invocations
func (mmGetKey *KeyRepositoryMock) GetKeyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetKey.beforeGetKeyCounter)
}

// Calls returns a list of arguments used in each call to KeyRepositoryMock.GetKey.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetKey *mKeyRepositoryMockGetKey) Calls() []*KeyRepositoryMockGetKeyParams {
	mmGetKey.mutex.RLock()

	argCopy := make([]*KeyRepositoryMockGetKeyParams, len(mmGetKey.callArgs))
	copy(argCopy, mmGetKey.callArgs)

	mmGetKey.mutex.RUnlock()

	return argCopy
}

// MinimockGetKeyDone returns true if the count of the GetKey invocations corresponds
// the number of defined expectations
func (m *KeyRepositoryMock) MinimockGetKeyDone() bool {
	if m.GetKeyMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetKeyMock.invocationsDone()
}

// MinimockGetKeyInspect logs each unmet expectation
func (m *KeyRepositoryMock) MinimockGetKeyInspect() {
	for _, e := range m.GetKeyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to KeyRepositoryMock.GetKey with params: %#v", *e.params)
		}
	}

	afterGetKeyCounter := mm_atomic.LoadUint64(&m.afterGetKeyCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetKeyMock.defaultExpectation != nil && afterGetKeyCounter < 1 {
		if m.GetKeyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to KeyRepositoryMock.GetKey")
		} else {
			m.t.Errorf("Expected call to KeyRepositoryMock.GetKey with params: %#v", *m.GetKeyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetKey != nil && afterGetKeyCounter < 1 {
		m.t.Error("Expected call to KeyRepositoryMock.GetKey")
	}

	if !m.GetKeyMock.invocationsDone() && afterGetKeyCounter > 0 {
		m.t.Errorf("Expected %d calls to KeyRepositoryMock.GetKey but found %d calls",
			mm_atomic.LoadUint64(&m.GetKeyMock.expectedInvocations), afterGetKeyCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *KeyRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGetKeyInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *KeyRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *KeyRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetKeyDone()
}
