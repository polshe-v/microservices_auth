// Code generated by http://github.com/gojuno/minimock (v3.3.12). DO NOT EDIT.

package mocks

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/polshe-v/microservices_auth/internal/model"
)

// CacheRepositoryMock implements repository.CacheRepository
type CacheRepositoryMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcCreateRecord          func(ctx context.Context, user *model.User) (err error)
	inspectFuncCreateRecord   func(ctx context.Context, user *model.User)
	afterCreateRecordCounter  uint64
	beforeCreateRecordCounter uint64
	CreateRecordMock          mCacheRepositoryMockCreateRecord

	funcGetRecord          func(ctx context.Context, id int64) (up1 *model.User, err error)
	inspectFuncGetRecord   func(ctx context.Context, id int64)
	afterGetRecordCounter  uint64
	beforeGetRecordCounter uint64
	GetRecordMock          mCacheRepositoryMockGetRecord
}

// NewCacheRepositoryMock returns a mock for repository.CacheRepository
func NewCacheRepositoryMock(t minimock.Tester) *CacheRepositoryMock {
	m := &CacheRepositoryMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.CreateRecordMock = mCacheRepositoryMockCreateRecord{mock: m}
	m.CreateRecordMock.callArgs = []*CacheRepositoryMockCreateRecordParams{}

	m.GetRecordMock = mCacheRepositoryMockGetRecord{mock: m}
	m.GetRecordMock.callArgs = []*CacheRepositoryMockGetRecordParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mCacheRepositoryMockCreateRecord struct {
	optional           bool
	mock               *CacheRepositoryMock
	defaultExpectation *CacheRepositoryMockCreateRecordExpectation
	expectations       []*CacheRepositoryMockCreateRecordExpectation

	callArgs []*CacheRepositoryMockCreateRecordParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// CacheRepositoryMockCreateRecordExpectation specifies expectation struct of the CacheRepository.CreateRecord
type CacheRepositoryMockCreateRecordExpectation struct {
	mock      *CacheRepositoryMock
	params    *CacheRepositoryMockCreateRecordParams
	paramPtrs *CacheRepositoryMockCreateRecordParamPtrs
	results   *CacheRepositoryMockCreateRecordResults
	Counter   uint64
}

// CacheRepositoryMockCreateRecordParams contains parameters of the CacheRepository.CreateRecord
type CacheRepositoryMockCreateRecordParams struct {
	ctx  context.Context
	user *model.User
}

// CacheRepositoryMockCreateRecordParamPtrs contains pointers to parameters of the CacheRepository.CreateRecord
type CacheRepositoryMockCreateRecordParamPtrs struct {
	ctx  *context.Context
	user **model.User
}

// CacheRepositoryMockCreateRecordResults contains results of the CacheRepository.CreateRecord
type CacheRepositoryMockCreateRecordResults struct {
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmCreateRecord *mCacheRepositoryMockCreateRecord) Optional() *mCacheRepositoryMockCreateRecord {
	mmCreateRecord.optional = true
	return mmCreateRecord
}

// Expect sets up expected params for CacheRepository.CreateRecord
func (mmCreateRecord *mCacheRepositoryMockCreateRecord) Expect(ctx context.Context, user *model.User) *mCacheRepositoryMockCreateRecord {
	if mmCreateRecord.mock.funcCreateRecord != nil {
		mmCreateRecord.mock.t.Fatalf("CacheRepositoryMock.CreateRecord mock is already set by Set")
	}

	if mmCreateRecord.defaultExpectation == nil {
		mmCreateRecord.defaultExpectation = &CacheRepositoryMockCreateRecordExpectation{}
	}

	if mmCreateRecord.defaultExpectation.paramPtrs != nil {
		mmCreateRecord.mock.t.Fatalf("CacheRepositoryMock.CreateRecord mock is already set by ExpectParams functions")
	}

	mmCreateRecord.defaultExpectation.params = &CacheRepositoryMockCreateRecordParams{ctx, user}
	for _, e := range mmCreateRecord.expectations {
		if minimock.Equal(e.params, mmCreateRecord.defaultExpectation.params) {
			mmCreateRecord.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmCreateRecord.defaultExpectation.params)
		}
	}

	return mmCreateRecord
}

// ExpectCtxParam1 sets up expected param ctx for CacheRepository.CreateRecord
func (mmCreateRecord *mCacheRepositoryMockCreateRecord) ExpectCtxParam1(ctx context.Context) *mCacheRepositoryMockCreateRecord {
	if mmCreateRecord.mock.funcCreateRecord != nil {
		mmCreateRecord.mock.t.Fatalf("CacheRepositoryMock.CreateRecord mock is already set by Set")
	}

	if mmCreateRecord.defaultExpectation == nil {
		mmCreateRecord.defaultExpectation = &CacheRepositoryMockCreateRecordExpectation{}
	}

	if mmCreateRecord.defaultExpectation.params != nil {
		mmCreateRecord.mock.t.Fatalf("CacheRepositoryMock.CreateRecord mock is already set by Expect")
	}

	if mmCreateRecord.defaultExpectation.paramPtrs == nil {
		mmCreateRecord.defaultExpectation.paramPtrs = &CacheRepositoryMockCreateRecordParamPtrs{}
	}
	mmCreateRecord.defaultExpectation.paramPtrs.ctx = &ctx

	return mmCreateRecord
}

// ExpectUserParam2 sets up expected param user for CacheRepository.CreateRecord
func (mmCreateRecord *mCacheRepositoryMockCreateRecord) ExpectUserParam2(user *model.User) *mCacheRepositoryMockCreateRecord {
	if mmCreateRecord.mock.funcCreateRecord != nil {
		mmCreateRecord.mock.t.Fatalf("CacheRepositoryMock.CreateRecord mock is already set by Set")
	}

	if mmCreateRecord.defaultExpectation == nil {
		mmCreateRecord.defaultExpectation = &CacheRepositoryMockCreateRecordExpectation{}
	}

	if mmCreateRecord.defaultExpectation.params != nil {
		mmCreateRecord.mock.t.Fatalf("CacheRepositoryMock.CreateRecord mock is already set by Expect")
	}

	if mmCreateRecord.defaultExpectation.paramPtrs == nil {
		mmCreateRecord.defaultExpectation.paramPtrs = &CacheRepositoryMockCreateRecordParamPtrs{}
	}
	mmCreateRecord.defaultExpectation.paramPtrs.user = &user

	return mmCreateRecord
}

// Inspect accepts an inspector function that has same arguments as the CacheRepository.CreateRecord
func (mmCreateRecord *mCacheRepositoryMockCreateRecord) Inspect(f func(ctx context.Context, user *model.User)) *mCacheRepositoryMockCreateRecord {
	if mmCreateRecord.mock.inspectFuncCreateRecord != nil {
		mmCreateRecord.mock.t.Fatalf("Inspect function is already set for CacheRepositoryMock.CreateRecord")
	}

	mmCreateRecord.mock.inspectFuncCreateRecord = f

	return mmCreateRecord
}

// Return sets up results that will be returned by CacheRepository.CreateRecord
func (mmCreateRecord *mCacheRepositoryMockCreateRecord) Return(err error) *CacheRepositoryMock {
	if mmCreateRecord.mock.funcCreateRecord != nil {
		mmCreateRecord.mock.t.Fatalf("CacheRepositoryMock.CreateRecord mock is already set by Set")
	}

	if mmCreateRecord.defaultExpectation == nil {
		mmCreateRecord.defaultExpectation = &CacheRepositoryMockCreateRecordExpectation{mock: mmCreateRecord.mock}
	}
	mmCreateRecord.defaultExpectation.results = &CacheRepositoryMockCreateRecordResults{err}
	return mmCreateRecord.mock
}

// Set uses given function f to mock the CacheRepository.CreateRecord method
func (mmCreateRecord *mCacheRepositoryMockCreateRecord) Set(f func(ctx context.Context, user *model.User) (err error)) *CacheRepositoryMock {
	if mmCreateRecord.defaultExpectation != nil {
		mmCreateRecord.mock.t.Fatalf("Default expectation is already set for the CacheRepository.CreateRecord method")
	}

	if len(mmCreateRecord.expectations) > 0 {
		mmCreateRecord.mock.t.Fatalf("Some expectations are already set for the CacheRepository.CreateRecord method")
	}

	mmCreateRecord.mock.funcCreateRecord = f
	return mmCreateRecord.mock
}

// When sets expectation for the CacheRepository.CreateRecord which will trigger the result defined by the following
// Then helper
func (mmCreateRecord *mCacheRepositoryMockCreateRecord) When(ctx context.Context, user *model.User) *CacheRepositoryMockCreateRecordExpectation {
	if mmCreateRecord.mock.funcCreateRecord != nil {
		mmCreateRecord.mock.t.Fatalf("CacheRepositoryMock.CreateRecord mock is already set by Set")
	}

	expectation := &CacheRepositoryMockCreateRecordExpectation{
		mock:   mmCreateRecord.mock,
		params: &CacheRepositoryMockCreateRecordParams{ctx, user},
	}
	mmCreateRecord.expectations = append(mmCreateRecord.expectations, expectation)
	return expectation
}

// Then sets up CacheRepository.CreateRecord return parameters for the expectation previously defined by the When method
func (e *CacheRepositoryMockCreateRecordExpectation) Then(err error) *CacheRepositoryMock {
	e.results = &CacheRepositoryMockCreateRecordResults{err}
	return e.mock
}

// Times sets number of times CacheRepository.CreateRecord should be invoked
func (mmCreateRecord *mCacheRepositoryMockCreateRecord) Times(n uint64) *mCacheRepositoryMockCreateRecord {
	if n == 0 {
		mmCreateRecord.mock.t.Fatalf("Times of CacheRepositoryMock.CreateRecord mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmCreateRecord.expectedInvocations, n)
	return mmCreateRecord
}

func (mmCreateRecord *mCacheRepositoryMockCreateRecord) invocationsDone() bool {
	if len(mmCreateRecord.expectations) == 0 && mmCreateRecord.defaultExpectation == nil && mmCreateRecord.mock.funcCreateRecord == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmCreateRecord.mock.afterCreateRecordCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmCreateRecord.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// CreateRecord implements repository.CacheRepository
func (mmCreateRecord *CacheRepositoryMock) CreateRecord(ctx context.Context, user *model.User) (err error) {
	mm_atomic.AddUint64(&mmCreateRecord.beforeCreateRecordCounter, 1)
	defer mm_atomic.AddUint64(&mmCreateRecord.afterCreateRecordCounter, 1)

	if mmCreateRecord.inspectFuncCreateRecord != nil {
		mmCreateRecord.inspectFuncCreateRecord(ctx, user)
	}

	mm_params := CacheRepositoryMockCreateRecordParams{ctx, user}

	// Record call args
	mmCreateRecord.CreateRecordMock.mutex.Lock()
	mmCreateRecord.CreateRecordMock.callArgs = append(mmCreateRecord.CreateRecordMock.callArgs, &mm_params)
	mmCreateRecord.CreateRecordMock.mutex.Unlock()

	for _, e := range mmCreateRecord.CreateRecordMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmCreateRecord.CreateRecordMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmCreateRecord.CreateRecordMock.defaultExpectation.Counter, 1)
		mm_want := mmCreateRecord.CreateRecordMock.defaultExpectation.params
		mm_want_ptrs := mmCreateRecord.CreateRecordMock.defaultExpectation.paramPtrs

		mm_got := CacheRepositoryMockCreateRecordParams{ctx, user}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmCreateRecord.t.Errorf("CacheRepositoryMock.CreateRecord got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmCreateRecord.t.Errorf("CacheRepositoryMock.CreateRecord got unexpected parameter user, want: %#v, got: %#v%s\n", *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmCreateRecord.t.Errorf("CacheRepositoryMock.CreateRecord got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmCreateRecord.CreateRecordMock.defaultExpectation.results
		if mm_results == nil {
			mmCreateRecord.t.Fatal("No results are set for the CacheRepositoryMock.CreateRecord")
		}
		return (*mm_results).err
	}
	if mmCreateRecord.funcCreateRecord != nil {
		return mmCreateRecord.funcCreateRecord(ctx, user)
	}
	mmCreateRecord.t.Fatalf("Unexpected call to CacheRepositoryMock.CreateRecord. %v %v", ctx, user)
	return
}

// CreateRecordAfterCounter returns a count of finished CacheRepositoryMock.CreateRecord invocations
func (mmCreateRecord *CacheRepositoryMock) CreateRecordAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateRecord.afterCreateRecordCounter)
}

// CreateRecordBeforeCounter returns a count of CacheRepositoryMock.CreateRecord invocations
func (mmCreateRecord *CacheRepositoryMock) CreateRecordBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmCreateRecord.beforeCreateRecordCounter)
}

// Calls returns a list of arguments used in each call to CacheRepositoryMock.CreateRecord.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmCreateRecord *mCacheRepositoryMockCreateRecord) Calls() []*CacheRepositoryMockCreateRecordParams {
	mmCreateRecord.mutex.RLock()

	argCopy := make([]*CacheRepositoryMockCreateRecordParams, len(mmCreateRecord.callArgs))
	copy(argCopy, mmCreateRecord.callArgs)

	mmCreateRecord.mutex.RUnlock()

	return argCopy
}

// MinimockCreateRecordDone returns true if the count of the CreateRecord invocations corresponds
// the number of defined expectations
func (m *CacheRepositoryMock) MinimockCreateRecordDone() bool {
	if m.CreateRecordMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.CreateRecordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.CreateRecordMock.invocationsDone()
}

// MinimockCreateRecordInspect logs each unmet expectation
func (m *CacheRepositoryMock) MinimockCreateRecordInspect() {
	for _, e := range m.CreateRecordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CacheRepositoryMock.CreateRecord with params: %#v", *e.params)
		}
	}

	afterCreateRecordCounter := mm_atomic.LoadUint64(&m.afterCreateRecordCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.CreateRecordMock.defaultExpectation != nil && afterCreateRecordCounter < 1 {
		if m.CreateRecordMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CacheRepositoryMock.CreateRecord")
		} else {
			m.t.Errorf("Expected call to CacheRepositoryMock.CreateRecord with params: %#v", *m.CreateRecordMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcCreateRecord != nil && afterCreateRecordCounter < 1 {
		m.t.Error("Expected call to CacheRepositoryMock.CreateRecord")
	}

	if !m.CreateRecordMock.invocationsDone() && afterCreateRecordCounter > 0 {
		m.t.Errorf("Expected %d calls to CacheRepositoryMock.CreateRecord but found %d calls",
			mm_atomic.LoadUint64(&m.CreateRecordMock.expectedInvocations), afterCreateRecordCounter)
	}
}

type mCacheRepositoryMockGetRecord struct {
	optional           bool
	mock               *CacheRepositoryMock
	defaultExpectation *CacheRepositoryMockGetRecordExpectation
	expectations       []*CacheRepositoryMockGetRecordExpectation

	callArgs []*CacheRepositoryMockGetRecordParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// CacheRepositoryMockGetRecordExpectation specifies expectation struct of the CacheRepository.GetRecord
type CacheRepositoryMockGetRecordExpectation struct {
	mock      *CacheRepositoryMock
	params    *CacheRepositoryMockGetRecordParams
	paramPtrs *CacheRepositoryMockGetRecordParamPtrs
	results   *CacheRepositoryMockGetRecordResults
	Counter   uint64
}

// CacheRepositoryMockGetRecordParams contains parameters of the CacheRepository.GetRecord
type CacheRepositoryMockGetRecordParams struct {
	ctx context.Context
	id  int64
}

// CacheRepositoryMockGetRecordParamPtrs contains pointers to parameters of the CacheRepository.GetRecord
type CacheRepositoryMockGetRecordParamPtrs struct {
	ctx *context.Context
	id  *int64
}

// CacheRepositoryMockGetRecordResults contains results of the CacheRepository.GetRecord
type CacheRepositoryMockGetRecordResults struct {
	up1 *model.User
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGetRecord *mCacheRepositoryMockGetRecord) Optional() *mCacheRepositoryMockGetRecord {
	mmGetRecord.optional = true
	return mmGetRecord
}

// Expect sets up expected params for CacheRepository.GetRecord
func (mmGetRecord *mCacheRepositoryMockGetRecord) Expect(ctx context.Context, id int64) *mCacheRepositoryMockGetRecord {
	if mmGetRecord.mock.funcGetRecord != nil {
		mmGetRecord.mock.t.Fatalf("CacheRepositoryMock.GetRecord mock is already set by Set")
	}

	if mmGetRecord.defaultExpectation == nil {
		mmGetRecord.defaultExpectation = &CacheRepositoryMockGetRecordExpectation{}
	}

	if mmGetRecord.defaultExpectation.paramPtrs != nil {
		mmGetRecord.mock.t.Fatalf("CacheRepositoryMock.GetRecord mock is already set by ExpectParams functions")
	}

	mmGetRecord.defaultExpectation.params = &CacheRepositoryMockGetRecordParams{ctx, id}
	for _, e := range mmGetRecord.expectations {
		if minimock.Equal(e.params, mmGetRecord.defaultExpectation.params) {
			mmGetRecord.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetRecord.defaultExpectation.params)
		}
	}

	return mmGetRecord
}

// ExpectCtxParam1 sets up expected param ctx for CacheRepository.GetRecord
func (mmGetRecord *mCacheRepositoryMockGetRecord) ExpectCtxParam1(ctx context.Context) *mCacheRepositoryMockGetRecord {
	if mmGetRecord.mock.funcGetRecord != nil {
		mmGetRecord.mock.t.Fatalf("CacheRepositoryMock.GetRecord mock is already set by Set")
	}

	if mmGetRecord.defaultExpectation == nil {
		mmGetRecord.defaultExpectation = &CacheRepositoryMockGetRecordExpectation{}
	}

	if mmGetRecord.defaultExpectation.params != nil {
		mmGetRecord.mock.t.Fatalf("CacheRepositoryMock.GetRecord mock is already set by Expect")
	}

	if mmGetRecord.defaultExpectation.paramPtrs == nil {
		mmGetRecord.defaultExpectation.paramPtrs = &CacheRepositoryMockGetRecordParamPtrs{}
	}
	mmGetRecord.defaultExpectation.paramPtrs.ctx = &ctx

	return mmGetRecord
}

// ExpectIdParam2 sets up expected param id for CacheRepository.GetRecord
func (mmGetRecord *mCacheRepositoryMockGetRecord) ExpectIdParam2(id int64) *mCacheRepositoryMockGetRecord {
	if mmGetRecord.mock.funcGetRecord != nil {
		mmGetRecord.mock.t.Fatalf("CacheRepositoryMock.GetRecord mock is already set by Set")
	}

	if mmGetRecord.defaultExpectation == nil {
		mmGetRecord.defaultExpectation = &CacheRepositoryMockGetRecordExpectation{}
	}

	if mmGetRecord.defaultExpectation.params != nil {
		mmGetRecord.mock.t.Fatalf("CacheRepositoryMock.GetRecord mock is already set by Expect")
	}

	if mmGetRecord.defaultExpectation.paramPtrs == nil {
		mmGetRecord.defaultExpectation.paramPtrs = &CacheRepositoryMockGetRecordParamPtrs{}
	}
	mmGetRecord.defaultExpectation.paramPtrs.id = &id

	return mmGetRecord
}

// Inspect accepts an inspector function that has same arguments as the CacheRepository.GetRecord
func (mmGetRecord *mCacheRepositoryMockGetRecord) Inspect(f func(ctx context.Context, id int64)) *mCacheRepositoryMockGetRecord {
	if mmGetRecord.mock.inspectFuncGetRecord != nil {
		mmGetRecord.mock.t.Fatalf("Inspect function is already set for CacheRepositoryMock.GetRecord")
	}

	mmGetRecord.mock.inspectFuncGetRecord = f

	return mmGetRecord
}

// Return sets up results that will be returned by CacheRepository.GetRecord
func (mmGetRecord *mCacheRepositoryMockGetRecord) Return(up1 *model.User, err error) *CacheRepositoryMock {
	if mmGetRecord.mock.funcGetRecord != nil {
		mmGetRecord.mock.t.Fatalf("CacheRepositoryMock.GetRecord mock is already set by Set")
	}

	if mmGetRecord.defaultExpectation == nil {
		mmGetRecord.defaultExpectation = &CacheRepositoryMockGetRecordExpectation{mock: mmGetRecord.mock}
	}
	mmGetRecord.defaultExpectation.results = &CacheRepositoryMockGetRecordResults{up1, err}
	return mmGetRecord.mock
}

// Set uses given function f to mock the CacheRepository.GetRecord method
func (mmGetRecord *mCacheRepositoryMockGetRecord) Set(f func(ctx context.Context, id int64) (up1 *model.User, err error)) *CacheRepositoryMock {
	if mmGetRecord.defaultExpectation != nil {
		mmGetRecord.mock.t.Fatalf("Default expectation is already set for the CacheRepository.GetRecord method")
	}

	if len(mmGetRecord.expectations) > 0 {
		mmGetRecord.mock.t.Fatalf("Some expectations are already set for the CacheRepository.GetRecord method")
	}

	mmGetRecord.mock.funcGetRecord = f
	return mmGetRecord.mock
}

// When sets expectation for the CacheRepository.GetRecord which will trigger the result defined by the following
// Then helper
func (mmGetRecord *mCacheRepositoryMockGetRecord) When(ctx context.Context, id int64) *CacheRepositoryMockGetRecordExpectation {
	if mmGetRecord.mock.funcGetRecord != nil {
		mmGetRecord.mock.t.Fatalf("CacheRepositoryMock.GetRecord mock is already set by Set")
	}

	expectation := &CacheRepositoryMockGetRecordExpectation{
		mock:   mmGetRecord.mock,
		params: &CacheRepositoryMockGetRecordParams{ctx, id},
	}
	mmGetRecord.expectations = append(mmGetRecord.expectations, expectation)
	return expectation
}

// Then sets up CacheRepository.GetRecord return parameters for the expectation previously defined by the When method
func (e *CacheRepositoryMockGetRecordExpectation) Then(up1 *model.User, err error) *CacheRepositoryMock {
	e.results = &CacheRepositoryMockGetRecordResults{up1, err}
	return e.mock
}

// Times sets number of times CacheRepository.GetRecord should be invoked
func (mmGetRecord *mCacheRepositoryMockGetRecord) Times(n uint64) *mCacheRepositoryMockGetRecord {
	if n == 0 {
		mmGetRecord.mock.t.Fatalf("Times of CacheRepositoryMock.GetRecord mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGetRecord.expectedInvocations, n)
	return mmGetRecord
}

func (mmGetRecord *mCacheRepositoryMockGetRecord) invocationsDone() bool {
	if len(mmGetRecord.expectations) == 0 && mmGetRecord.defaultExpectation == nil && mmGetRecord.mock.funcGetRecord == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGetRecord.mock.afterGetRecordCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGetRecord.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// GetRecord implements repository.CacheRepository
func (mmGetRecord *CacheRepositoryMock) GetRecord(ctx context.Context, id int64) (up1 *model.User, err error) {
	mm_atomic.AddUint64(&mmGetRecord.beforeGetRecordCounter, 1)
	defer mm_atomic.AddUint64(&mmGetRecord.afterGetRecordCounter, 1)

	if mmGetRecord.inspectFuncGetRecord != nil {
		mmGetRecord.inspectFuncGetRecord(ctx, id)
	}

	mm_params := CacheRepositoryMockGetRecordParams{ctx, id}

	// Record call args
	mmGetRecord.GetRecordMock.mutex.Lock()
	mmGetRecord.GetRecordMock.callArgs = append(mmGetRecord.GetRecordMock.callArgs, &mm_params)
	mmGetRecord.GetRecordMock.mutex.Unlock()

	for _, e := range mmGetRecord.GetRecordMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmGetRecord.GetRecordMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetRecord.GetRecordMock.defaultExpectation.Counter, 1)
		mm_want := mmGetRecord.GetRecordMock.defaultExpectation.params
		mm_want_ptrs := mmGetRecord.GetRecordMock.defaultExpectation.paramPtrs

		mm_got := CacheRepositoryMockGetRecordParams{ctx, id}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.ctx != nil && !minimock.Equal(*mm_want_ptrs.ctx, mm_got.ctx) {
				mmGetRecord.t.Errorf("CacheRepositoryMock.GetRecord got unexpected parameter ctx, want: %#v, got: %#v%s\n", *mm_want_ptrs.ctx, mm_got.ctx, minimock.Diff(*mm_want_ptrs.ctx, mm_got.ctx))
			}

			if mm_want_ptrs.id != nil && !minimock.Equal(*mm_want_ptrs.id, mm_got.id) {
				mmGetRecord.t.Errorf("CacheRepositoryMock.GetRecord got unexpected parameter id, want: %#v, got: %#v%s\n", *mm_want_ptrs.id, mm_got.id, minimock.Diff(*mm_want_ptrs.id, mm_got.id))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetRecord.t.Errorf("CacheRepositoryMock.GetRecord got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetRecord.GetRecordMock.defaultExpectation.results
		if mm_results == nil {
			mmGetRecord.t.Fatal("No results are set for the CacheRepositoryMock.GetRecord")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmGetRecord.funcGetRecord != nil {
		return mmGetRecord.funcGetRecord(ctx, id)
	}
	mmGetRecord.t.Fatalf("Unexpected call to CacheRepositoryMock.GetRecord. %v %v", ctx, id)
	return
}

// GetRecordAfterCounter returns a count of finished CacheRepositoryMock.GetRecord invocations
func (mmGetRecord *CacheRepositoryMock) GetRecordAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRecord.afterGetRecordCounter)
}

// GetRecordBeforeCounter returns a count of CacheRepositoryMock.GetRecord invocations
func (mmGetRecord *CacheRepositoryMock) GetRecordBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetRecord.beforeGetRecordCounter)
}

// Calls returns a list of arguments used in each call to CacheRepositoryMock.GetRecord.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetRecord *mCacheRepositoryMockGetRecord) Calls() []*CacheRepositoryMockGetRecordParams {
	mmGetRecord.mutex.RLock()

	argCopy := make([]*CacheRepositoryMockGetRecordParams, len(mmGetRecord.callArgs))
	copy(argCopy, mmGetRecord.callArgs)

	mmGetRecord.mutex.RUnlock()

	return argCopy
}

// MinimockGetRecordDone returns true if the count of the GetRecord invocations corresponds
// the number of defined expectations
func (m *CacheRepositoryMock) MinimockGetRecordDone() bool {
	if m.GetRecordMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GetRecordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GetRecordMock.invocationsDone()
}

// MinimockGetRecordInspect logs each unmet expectation
func (m *CacheRepositoryMock) MinimockGetRecordInspect() {
	for _, e := range m.GetRecordMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to CacheRepositoryMock.GetRecord with params: %#v", *e.params)
		}
	}

	afterGetRecordCounter := mm_atomic.LoadUint64(&m.afterGetRecordCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GetRecordMock.defaultExpectation != nil && afterGetRecordCounter < 1 {
		if m.GetRecordMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to CacheRepositoryMock.GetRecord")
		} else {
			m.t.Errorf("Expected call to CacheRepositoryMock.GetRecord with params: %#v", *m.GetRecordMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetRecord != nil && afterGetRecordCounter < 1 {
		m.t.Error("Expected call to CacheRepositoryMock.GetRecord")
	}

	if !m.GetRecordMock.invocationsDone() && afterGetRecordCounter > 0 {
		m.t.Errorf("Expected %d calls to CacheRepositoryMock.GetRecord but found %d calls",
			mm_atomic.LoadUint64(&m.GetRecordMock.expectedInvocations), afterGetRecordCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *CacheRepositoryMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockCreateRecordInspect()

			m.MinimockGetRecordInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *CacheRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *CacheRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockCreateRecordDone() &&
		m.MinimockGetRecordDone()
}
