// Code generated by http://github.com/gojuno/minimock (v3.3.12). DO NOT EDIT.

package mocks

import (
	"sync"
	mm_atomic "sync/atomic"
	"time"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/polshe-v/microservices_auth/internal/model"
)

// TokenOperationsMock implements tokens.TokenOperations
type TokenOperationsMock struct {
	t          minimock.Tester
	finishOnce sync.Once

	funcGenerate          func(user model.User, secretKey []byte, duration time.Duration) (s1 string, err error)
	inspectFuncGenerate   func(user model.User, secretKey []byte, duration time.Duration)
	afterGenerateCounter  uint64
	beforeGenerateCounter uint64
	GenerateMock          mTokenOperationsMockGenerate

	funcVerify          func(tokenStr string, secretKey []byte) (up1 *model.UserClaims, err error)
	inspectFuncVerify   func(tokenStr string, secretKey []byte)
	afterVerifyCounter  uint64
	beforeVerifyCounter uint64
	VerifyMock          mTokenOperationsMockVerify
}

// NewTokenOperationsMock returns a mock for tokens.TokenOperations
func NewTokenOperationsMock(t minimock.Tester) *TokenOperationsMock {
	m := &TokenOperationsMock{t: t}

	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GenerateMock = mTokenOperationsMockGenerate{mock: m}
	m.GenerateMock.callArgs = []*TokenOperationsMockGenerateParams{}

	m.VerifyMock = mTokenOperationsMockVerify{mock: m}
	m.VerifyMock.callArgs = []*TokenOperationsMockVerifyParams{}

	t.Cleanup(m.MinimockFinish)

	return m
}

type mTokenOperationsMockGenerate struct {
	optional           bool
	mock               *TokenOperationsMock
	defaultExpectation *TokenOperationsMockGenerateExpectation
	expectations       []*TokenOperationsMockGenerateExpectation

	callArgs []*TokenOperationsMockGenerateParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// TokenOperationsMockGenerateExpectation specifies expectation struct of the TokenOperations.Generate
type TokenOperationsMockGenerateExpectation struct {
	mock      *TokenOperationsMock
	params    *TokenOperationsMockGenerateParams
	paramPtrs *TokenOperationsMockGenerateParamPtrs
	results   *TokenOperationsMockGenerateResults
	Counter   uint64
}

// TokenOperationsMockGenerateParams contains parameters of the TokenOperations.Generate
type TokenOperationsMockGenerateParams struct {
	user      model.User
	secretKey []byte
	duration  time.Duration
}

// TokenOperationsMockGenerateParamPtrs contains pointers to parameters of the TokenOperations.Generate
type TokenOperationsMockGenerateParamPtrs struct {
	user      *model.User
	secretKey *[]byte
	duration  *time.Duration
}

// TokenOperationsMockGenerateResults contains results of the TokenOperations.Generate
type TokenOperationsMockGenerateResults struct {
	s1  string
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmGenerate *mTokenOperationsMockGenerate) Optional() *mTokenOperationsMockGenerate {
	mmGenerate.optional = true
	return mmGenerate
}

// Expect sets up expected params for TokenOperations.Generate
func (mmGenerate *mTokenOperationsMockGenerate) Expect(user model.User, secretKey []byte, duration time.Duration) *mTokenOperationsMockGenerate {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("TokenOperationsMock.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &TokenOperationsMockGenerateExpectation{}
	}

	if mmGenerate.defaultExpectation.paramPtrs != nil {
		mmGenerate.mock.t.Fatalf("TokenOperationsMock.Generate mock is already set by ExpectParams functions")
	}

	mmGenerate.defaultExpectation.params = &TokenOperationsMockGenerateParams{user, secretKey, duration}
	for _, e := range mmGenerate.expectations {
		if minimock.Equal(e.params, mmGenerate.defaultExpectation.params) {
			mmGenerate.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGenerate.defaultExpectation.params)
		}
	}

	return mmGenerate
}

// ExpectUserParam1 sets up expected param user for TokenOperations.Generate
func (mmGenerate *mTokenOperationsMockGenerate) ExpectUserParam1(user model.User) *mTokenOperationsMockGenerate {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("TokenOperationsMock.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &TokenOperationsMockGenerateExpectation{}
	}

	if mmGenerate.defaultExpectation.params != nil {
		mmGenerate.mock.t.Fatalf("TokenOperationsMock.Generate mock is already set by Expect")
	}

	if mmGenerate.defaultExpectation.paramPtrs == nil {
		mmGenerate.defaultExpectation.paramPtrs = &TokenOperationsMockGenerateParamPtrs{}
	}
	mmGenerate.defaultExpectation.paramPtrs.user = &user

	return mmGenerate
}

// ExpectSecretKeyParam2 sets up expected param secretKey for TokenOperations.Generate
func (mmGenerate *mTokenOperationsMockGenerate) ExpectSecretKeyParam2(secretKey []byte) *mTokenOperationsMockGenerate {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("TokenOperationsMock.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &TokenOperationsMockGenerateExpectation{}
	}

	if mmGenerate.defaultExpectation.params != nil {
		mmGenerate.mock.t.Fatalf("TokenOperationsMock.Generate mock is already set by Expect")
	}

	if mmGenerate.defaultExpectation.paramPtrs == nil {
		mmGenerate.defaultExpectation.paramPtrs = &TokenOperationsMockGenerateParamPtrs{}
	}
	mmGenerate.defaultExpectation.paramPtrs.secretKey = &secretKey

	return mmGenerate
}

// ExpectDurationParam3 sets up expected param duration for TokenOperations.Generate
func (mmGenerate *mTokenOperationsMockGenerate) ExpectDurationParam3(duration time.Duration) *mTokenOperationsMockGenerate {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("TokenOperationsMock.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &TokenOperationsMockGenerateExpectation{}
	}

	if mmGenerate.defaultExpectation.params != nil {
		mmGenerate.mock.t.Fatalf("TokenOperationsMock.Generate mock is already set by Expect")
	}

	if mmGenerate.defaultExpectation.paramPtrs == nil {
		mmGenerate.defaultExpectation.paramPtrs = &TokenOperationsMockGenerateParamPtrs{}
	}
	mmGenerate.defaultExpectation.paramPtrs.duration = &duration

	return mmGenerate
}

// Inspect accepts an inspector function that has same arguments as the TokenOperations.Generate
func (mmGenerate *mTokenOperationsMockGenerate) Inspect(f func(user model.User, secretKey []byte, duration time.Duration)) *mTokenOperationsMockGenerate {
	if mmGenerate.mock.inspectFuncGenerate != nil {
		mmGenerate.mock.t.Fatalf("Inspect function is already set for TokenOperationsMock.Generate")
	}

	mmGenerate.mock.inspectFuncGenerate = f

	return mmGenerate
}

// Return sets up results that will be returned by TokenOperations.Generate
func (mmGenerate *mTokenOperationsMockGenerate) Return(s1 string, err error) *TokenOperationsMock {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("TokenOperationsMock.Generate mock is already set by Set")
	}

	if mmGenerate.defaultExpectation == nil {
		mmGenerate.defaultExpectation = &TokenOperationsMockGenerateExpectation{mock: mmGenerate.mock}
	}
	mmGenerate.defaultExpectation.results = &TokenOperationsMockGenerateResults{s1, err}
	return mmGenerate.mock
}

// Set uses given function f to mock the TokenOperations.Generate method
func (mmGenerate *mTokenOperationsMockGenerate) Set(f func(user model.User, secretKey []byte, duration time.Duration) (s1 string, err error)) *TokenOperationsMock {
	if mmGenerate.defaultExpectation != nil {
		mmGenerate.mock.t.Fatalf("Default expectation is already set for the TokenOperations.Generate method")
	}

	if len(mmGenerate.expectations) > 0 {
		mmGenerate.mock.t.Fatalf("Some expectations are already set for the TokenOperations.Generate method")
	}

	mmGenerate.mock.funcGenerate = f
	return mmGenerate.mock
}

// When sets expectation for the TokenOperations.Generate which will trigger the result defined by the following
// Then helper
func (mmGenerate *mTokenOperationsMockGenerate) When(user model.User, secretKey []byte, duration time.Duration) *TokenOperationsMockGenerateExpectation {
	if mmGenerate.mock.funcGenerate != nil {
		mmGenerate.mock.t.Fatalf("TokenOperationsMock.Generate mock is already set by Set")
	}

	expectation := &TokenOperationsMockGenerateExpectation{
		mock:   mmGenerate.mock,
		params: &TokenOperationsMockGenerateParams{user, secretKey, duration},
	}
	mmGenerate.expectations = append(mmGenerate.expectations, expectation)
	return expectation
}

// Then sets up TokenOperations.Generate return parameters for the expectation previously defined by the When method
func (e *TokenOperationsMockGenerateExpectation) Then(s1 string, err error) *TokenOperationsMock {
	e.results = &TokenOperationsMockGenerateResults{s1, err}
	return e.mock
}

// Times sets number of times TokenOperations.Generate should be invoked
func (mmGenerate *mTokenOperationsMockGenerate) Times(n uint64) *mTokenOperationsMockGenerate {
	if n == 0 {
		mmGenerate.mock.t.Fatalf("Times of TokenOperationsMock.Generate mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmGenerate.expectedInvocations, n)
	return mmGenerate
}

func (mmGenerate *mTokenOperationsMockGenerate) invocationsDone() bool {
	if len(mmGenerate.expectations) == 0 && mmGenerate.defaultExpectation == nil && mmGenerate.mock.funcGenerate == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmGenerate.mock.afterGenerateCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmGenerate.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Generate implements tokens.TokenOperations
func (mmGenerate *TokenOperationsMock) Generate(user model.User, secretKey []byte, duration time.Duration) (s1 string, err error) {
	mm_atomic.AddUint64(&mmGenerate.beforeGenerateCounter, 1)
	defer mm_atomic.AddUint64(&mmGenerate.afterGenerateCounter, 1)

	if mmGenerate.inspectFuncGenerate != nil {
		mmGenerate.inspectFuncGenerate(user, secretKey, duration)
	}

	mm_params := TokenOperationsMockGenerateParams{user, secretKey, duration}

	// Record call args
	mmGenerate.GenerateMock.mutex.Lock()
	mmGenerate.GenerateMock.callArgs = append(mmGenerate.GenerateMock.callArgs, &mm_params)
	mmGenerate.GenerateMock.mutex.Unlock()

	for _, e := range mmGenerate.GenerateMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.s1, e.results.err
		}
	}

	if mmGenerate.GenerateMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGenerate.GenerateMock.defaultExpectation.Counter, 1)
		mm_want := mmGenerate.GenerateMock.defaultExpectation.params
		mm_want_ptrs := mmGenerate.GenerateMock.defaultExpectation.paramPtrs

		mm_got := TokenOperationsMockGenerateParams{user, secretKey, duration}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.user != nil && !minimock.Equal(*mm_want_ptrs.user, mm_got.user) {
				mmGenerate.t.Errorf("TokenOperationsMock.Generate got unexpected parameter user, want: %#v, got: %#v%s\n", *mm_want_ptrs.user, mm_got.user, minimock.Diff(*mm_want_ptrs.user, mm_got.user))
			}

			if mm_want_ptrs.secretKey != nil && !minimock.Equal(*mm_want_ptrs.secretKey, mm_got.secretKey) {
				mmGenerate.t.Errorf("TokenOperationsMock.Generate got unexpected parameter secretKey, want: %#v, got: %#v%s\n", *mm_want_ptrs.secretKey, mm_got.secretKey, minimock.Diff(*mm_want_ptrs.secretKey, mm_got.secretKey))
			}

			if mm_want_ptrs.duration != nil && !minimock.Equal(*mm_want_ptrs.duration, mm_got.duration) {
				mmGenerate.t.Errorf("TokenOperationsMock.Generate got unexpected parameter duration, want: %#v, got: %#v%s\n", *mm_want_ptrs.duration, mm_got.duration, minimock.Diff(*mm_want_ptrs.duration, mm_got.duration))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGenerate.t.Errorf("TokenOperationsMock.Generate got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGenerate.GenerateMock.defaultExpectation.results
		if mm_results == nil {
			mmGenerate.t.Fatal("No results are set for the TokenOperationsMock.Generate")
		}
		return (*mm_results).s1, (*mm_results).err
	}
	if mmGenerate.funcGenerate != nil {
		return mmGenerate.funcGenerate(user, secretKey, duration)
	}
	mmGenerate.t.Fatalf("Unexpected call to TokenOperationsMock.Generate. %v %v %v", user, secretKey, duration)
	return
}

// GenerateAfterCounter returns a count of finished TokenOperationsMock.Generate invocations
func (mmGenerate *TokenOperationsMock) GenerateAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerate.afterGenerateCounter)
}

// GenerateBeforeCounter returns a count of TokenOperationsMock.Generate invocations
func (mmGenerate *TokenOperationsMock) GenerateBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGenerate.beforeGenerateCounter)
}

// Calls returns a list of arguments used in each call to TokenOperationsMock.Generate.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGenerate *mTokenOperationsMockGenerate) Calls() []*TokenOperationsMockGenerateParams {
	mmGenerate.mutex.RLock()

	argCopy := make([]*TokenOperationsMockGenerateParams, len(mmGenerate.callArgs))
	copy(argCopy, mmGenerate.callArgs)

	mmGenerate.mutex.RUnlock()

	return argCopy
}

// MinimockGenerateDone returns true if the count of the Generate invocations corresponds
// the number of defined expectations
func (m *TokenOperationsMock) MinimockGenerateDone() bool {
	if m.GenerateMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.GenerateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.GenerateMock.invocationsDone()
}

// MinimockGenerateInspect logs each unmet expectation
func (m *TokenOperationsMock) MinimockGenerateInspect() {
	for _, e := range m.GenerateMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TokenOperationsMock.Generate with params: %#v", *e.params)
		}
	}

	afterGenerateCounter := mm_atomic.LoadUint64(&m.afterGenerateCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.GenerateMock.defaultExpectation != nil && afterGenerateCounter < 1 {
		if m.GenerateMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TokenOperationsMock.Generate")
		} else {
			m.t.Errorf("Expected call to TokenOperationsMock.Generate with params: %#v", *m.GenerateMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGenerate != nil && afterGenerateCounter < 1 {
		m.t.Error("Expected call to TokenOperationsMock.Generate")
	}

	if !m.GenerateMock.invocationsDone() && afterGenerateCounter > 0 {
		m.t.Errorf("Expected %d calls to TokenOperationsMock.Generate but found %d calls",
			mm_atomic.LoadUint64(&m.GenerateMock.expectedInvocations), afterGenerateCounter)
	}
}

type mTokenOperationsMockVerify struct {
	optional           bool
	mock               *TokenOperationsMock
	defaultExpectation *TokenOperationsMockVerifyExpectation
	expectations       []*TokenOperationsMockVerifyExpectation

	callArgs []*TokenOperationsMockVerifyParams
	mutex    sync.RWMutex

	expectedInvocations uint64
}

// TokenOperationsMockVerifyExpectation specifies expectation struct of the TokenOperations.Verify
type TokenOperationsMockVerifyExpectation struct {
	mock      *TokenOperationsMock
	params    *TokenOperationsMockVerifyParams
	paramPtrs *TokenOperationsMockVerifyParamPtrs
	results   *TokenOperationsMockVerifyResults
	Counter   uint64
}

// TokenOperationsMockVerifyParams contains parameters of the TokenOperations.Verify
type TokenOperationsMockVerifyParams struct {
	tokenStr  string
	secretKey []byte
}

// TokenOperationsMockVerifyParamPtrs contains pointers to parameters of the TokenOperations.Verify
type TokenOperationsMockVerifyParamPtrs struct {
	tokenStr  *string
	secretKey *[]byte
}

// TokenOperationsMockVerifyResults contains results of the TokenOperations.Verify
type TokenOperationsMockVerifyResults struct {
	up1 *model.UserClaims
	err error
}

// Marks this method to be optional. The default behavior of any method with Return() is '1 or more', meaning
// the test will fail minimock's automatic final call check if the mocked method was not called at least once.
// Optional() makes method check to work in '0 or more' mode.
// It is NOT RECOMMENDED to use this option unless you really need it, as default behaviour helps to
// catch the problems when the expected method call is totally skipped during test run.
func (mmVerify *mTokenOperationsMockVerify) Optional() *mTokenOperationsMockVerify {
	mmVerify.optional = true
	return mmVerify
}

// Expect sets up expected params for TokenOperations.Verify
func (mmVerify *mTokenOperationsMockVerify) Expect(tokenStr string, secretKey []byte) *mTokenOperationsMockVerify {
	if mmVerify.mock.funcVerify != nil {
		mmVerify.mock.t.Fatalf("TokenOperationsMock.Verify mock is already set by Set")
	}

	if mmVerify.defaultExpectation == nil {
		mmVerify.defaultExpectation = &TokenOperationsMockVerifyExpectation{}
	}

	if mmVerify.defaultExpectation.paramPtrs != nil {
		mmVerify.mock.t.Fatalf("TokenOperationsMock.Verify mock is already set by ExpectParams functions")
	}

	mmVerify.defaultExpectation.params = &TokenOperationsMockVerifyParams{tokenStr, secretKey}
	for _, e := range mmVerify.expectations {
		if minimock.Equal(e.params, mmVerify.defaultExpectation.params) {
			mmVerify.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmVerify.defaultExpectation.params)
		}
	}

	return mmVerify
}

// ExpectTokenStrParam1 sets up expected param tokenStr for TokenOperations.Verify
func (mmVerify *mTokenOperationsMockVerify) ExpectTokenStrParam1(tokenStr string) *mTokenOperationsMockVerify {
	if mmVerify.mock.funcVerify != nil {
		mmVerify.mock.t.Fatalf("TokenOperationsMock.Verify mock is already set by Set")
	}

	if mmVerify.defaultExpectation == nil {
		mmVerify.defaultExpectation = &TokenOperationsMockVerifyExpectation{}
	}

	if mmVerify.defaultExpectation.params != nil {
		mmVerify.mock.t.Fatalf("TokenOperationsMock.Verify mock is already set by Expect")
	}

	if mmVerify.defaultExpectation.paramPtrs == nil {
		mmVerify.defaultExpectation.paramPtrs = &TokenOperationsMockVerifyParamPtrs{}
	}
	mmVerify.defaultExpectation.paramPtrs.tokenStr = &tokenStr

	return mmVerify
}

// ExpectSecretKeyParam2 sets up expected param secretKey for TokenOperations.Verify
func (mmVerify *mTokenOperationsMockVerify) ExpectSecretKeyParam2(secretKey []byte) *mTokenOperationsMockVerify {
	if mmVerify.mock.funcVerify != nil {
		mmVerify.mock.t.Fatalf("TokenOperationsMock.Verify mock is already set by Set")
	}

	if mmVerify.defaultExpectation == nil {
		mmVerify.defaultExpectation = &TokenOperationsMockVerifyExpectation{}
	}

	if mmVerify.defaultExpectation.params != nil {
		mmVerify.mock.t.Fatalf("TokenOperationsMock.Verify mock is already set by Expect")
	}

	if mmVerify.defaultExpectation.paramPtrs == nil {
		mmVerify.defaultExpectation.paramPtrs = &TokenOperationsMockVerifyParamPtrs{}
	}
	mmVerify.defaultExpectation.paramPtrs.secretKey = &secretKey

	return mmVerify
}

// Inspect accepts an inspector function that has same arguments as the TokenOperations.Verify
func (mmVerify *mTokenOperationsMockVerify) Inspect(f func(tokenStr string, secretKey []byte)) *mTokenOperationsMockVerify {
	if mmVerify.mock.inspectFuncVerify != nil {
		mmVerify.mock.t.Fatalf("Inspect function is already set for TokenOperationsMock.Verify")
	}

	mmVerify.mock.inspectFuncVerify = f

	return mmVerify
}

// Return sets up results that will be returned by TokenOperations.Verify
func (mmVerify *mTokenOperationsMockVerify) Return(up1 *model.UserClaims, err error) *TokenOperationsMock {
	if mmVerify.mock.funcVerify != nil {
		mmVerify.mock.t.Fatalf("TokenOperationsMock.Verify mock is already set by Set")
	}

	if mmVerify.defaultExpectation == nil {
		mmVerify.defaultExpectation = &TokenOperationsMockVerifyExpectation{mock: mmVerify.mock}
	}
	mmVerify.defaultExpectation.results = &TokenOperationsMockVerifyResults{up1, err}
	return mmVerify.mock
}

// Set uses given function f to mock the TokenOperations.Verify method
func (mmVerify *mTokenOperationsMockVerify) Set(f func(tokenStr string, secretKey []byte) (up1 *model.UserClaims, err error)) *TokenOperationsMock {
	if mmVerify.defaultExpectation != nil {
		mmVerify.mock.t.Fatalf("Default expectation is already set for the TokenOperations.Verify method")
	}

	if len(mmVerify.expectations) > 0 {
		mmVerify.mock.t.Fatalf("Some expectations are already set for the TokenOperations.Verify method")
	}

	mmVerify.mock.funcVerify = f
	return mmVerify.mock
}

// When sets expectation for the TokenOperations.Verify which will trigger the result defined by the following
// Then helper
func (mmVerify *mTokenOperationsMockVerify) When(tokenStr string, secretKey []byte) *TokenOperationsMockVerifyExpectation {
	if mmVerify.mock.funcVerify != nil {
		mmVerify.mock.t.Fatalf("TokenOperationsMock.Verify mock is already set by Set")
	}

	expectation := &TokenOperationsMockVerifyExpectation{
		mock:   mmVerify.mock,
		params: &TokenOperationsMockVerifyParams{tokenStr, secretKey},
	}
	mmVerify.expectations = append(mmVerify.expectations, expectation)
	return expectation
}

// Then sets up TokenOperations.Verify return parameters for the expectation previously defined by the When method
func (e *TokenOperationsMockVerifyExpectation) Then(up1 *model.UserClaims, err error) *TokenOperationsMock {
	e.results = &TokenOperationsMockVerifyResults{up1, err}
	return e.mock
}

// Times sets number of times TokenOperations.Verify should be invoked
func (mmVerify *mTokenOperationsMockVerify) Times(n uint64) *mTokenOperationsMockVerify {
	if n == 0 {
		mmVerify.mock.t.Fatalf("Times of TokenOperationsMock.Verify mock can not be zero")
	}
	mm_atomic.StoreUint64(&mmVerify.expectedInvocations, n)
	return mmVerify
}

func (mmVerify *mTokenOperationsMockVerify) invocationsDone() bool {
	if len(mmVerify.expectations) == 0 && mmVerify.defaultExpectation == nil && mmVerify.mock.funcVerify == nil {
		return true
	}

	totalInvocations := mm_atomic.LoadUint64(&mmVerify.mock.afterVerifyCounter)
	expectedInvocations := mm_atomic.LoadUint64(&mmVerify.expectedInvocations)

	return totalInvocations > 0 && (expectedInvocations == 0 || expectedInvocations == totalInvocations)
}

// Verify implements tokens.TokenOperations
func (mmVerify *TokenOperationsMock) Verify(tokenStr string, secretKey []byte) (up1 *model.UserClaims, err error) {
	mm_atomic.AddUint64(&mmVerify.beforeVerifyCounter, 1)
	defer mm_atomic.AddUint64(&mmVerify.afterVerifyCounter, 1)

	if mmVerify.inspectFuncVerify != nil {
		mmVerify.inspectFuncVerify(tokenStr, secretKey)
	}

	mm_params := TokenOperationsMockVerifyParams{tokenStr, secretKey}

	// Record call args
	mmVerify.VerifyMock.mutex.Lock()
	mmVerify.VerifyMock.callArgs = append(mmVerify.VerifyMock.callArgs, &mm_params)
	mmVerify.VerifyMock.mutex.Unlock()

	for _, e := range mmVerify.VerifyMock.expectations {
		if minimock.Equal(*e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.up1, e.results.err
		}
	}

	if mmVerify.VerifyMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmVerify.VerifyMock.defaultExpectation.Counter, 1)
		mm_want := mmVerify.VerifyMock.defaultExpectation.params
		mm_want_ptrs := mmVerify.VerifyMock.defaultExpectation.paramPtrs

		mm_got := TokenOperationsMockVerifyParams{tokenStr, secretKey}

		if mm_want_ptrs != nil {

			if mm_want_ptrs.tokenStr != nil && !minimock.Equal(*mm_want_ptrs.tokenStr, mm_got.tokenStr) {
				mmVerify.t.Errorf("TokenOperationsMock.Verify got unexpected parameter tokenStr, want: %#v, got: %#v%s\n", *mm_want_ptrs.tokenStr, mm_got.tokenStr, minimock.Diff(*mm_want_ptrs.tokenStr, mm_got.tokenStr))
			}

			if mm_want_ptrs.secretKey != nil && !minimock.Equal(*mm_want_ptrs.secretKey, mm_got.secretKey) {
				mmVerify.t.Errorf("TokenOperationsMock.Verify got unexpected parameter secretKey, want: %#v, got: %#v%s\n", *mm_want_ptrs.secretKey, mm_got.secretKey, minimock.Diff(*mm_want_ptrs.secretKey, mm_got.secretKey))
			}

		} else if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmVerify.t.Errorf("TokenOperationsMock.Verify got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmVerify.VerifyMock.defaultExpectation.results
		if mm_results == nil {
			mmVerify.t.Fatal("No results are set for the TokenOperationsMock.Verify")
		}
		return (*mm_results).up1, (*mm_results).err
	}
	if mmVerify.funcVerify != nil {
		return mmVerify.funcVerify(tokenStr, secretKey)
	}
	mmVerify.t.Fatalf("Unexpected call to TokenOperationsMock.Verify. %v %v", tokenStr, secretKey)
	return
}

// VerifyAfterCounter returns a count of finished TokenOperationsMock.Verify invocations
func (mmVerify *TokenOperationsMock) VerifyAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerify.afterVerifyCounter)
}

// VerifyBeforeCounter returns a count of TokenOperationsMock.Verify invocations
func (mmVerify *TokenOperationsMock) VerifyBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmVerify.beforeVerifyCounter)
}

// Calls returns a list of arguments used in each call to TokenOperationsMock.Verify.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmVerify *mTokenOperationsMockVerify) Calls() []*TokenOperationsMockVerifyParams {
	mmVerify.mutex.RLock()

	argCopy := make([]*TokenOperationsMockVerifyParams, len(mmVerify.callArgs))
	copy(argCopy, mmVerify.callArgs)

	mmVerify.mutex.RUnlock()

	return argCopy
}

// MinimockVerifyDone returns true if the count of the Verify invocations corresponds
// the number of defined expectations
func (m *TokenOperationsMock) MinimockVerifyDone() bool {
	if m.VerifyMock.optional {
		// Optional methods provide '0 or more' call count restriction.
		return true
	}

	for _, e := range m.VerifyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	return m.VerifyMock.invocationsDone()
}

// MinimockVerifyInspect logs each unmet expectation
func (m *TokenOperationsMock) MinimockVerifyInspect() {
	for _, e := range m.VerifyMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to TokenOperationsMock.Verify with params: %#v", *e.params)
		}
	}

	afterVerifyCounter := mm_atomic.LoadUint64(&m.afterVerifyCounter)
	// if default expectation was set then invocations count should be greater than zero
	if m.VerifyMock.defaultExpectation != nil && afterVerifyCounter < 1 {
		if m.VerifyMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to TokenOperationsMock.Verify")
		} else {
			m.t.Errorf("Expected call to TokenOperationsMock.Verify with params: %#v", *m.VerifyMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcVerify != nil && afterVerifyCounter < 1 {
		m.t.Error("Expected call to TokenOperationsMock.Verify")
	}

	if !m.VerifyMock.invocationsDone() && afterVerifyCounter > 0 {
		m.t.Errorf("Expected %d calls to TokenOperationsMock.Verify but found %d calls",
			mm_atomic.LoadUint64(&m.VerifyMock.expectedInvocations), afterVerifyCounter)
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *TokenOperationsMock) MinimockFinish() {
	m.finishOnce.Do(func() {
		if !m.minimockDone() {
			m.MinimockGenerateInspect()

			m.MinimockVerifyInspect()
		}
	})
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *TokenOperationsMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *TokenOperationsMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGenerateDone() &&
		m.MinimockVerifyDone()
}
